//Game title: Tires on the loose!


//Declaring counter and defining token 
Ball b1;
Ball b2;
Ball b2;
Shooter s;
int counter;

void setup() {
  size(600, 600);

//Declaring our variables 
  b1 = new Ball();
  b2 = new Ball();
	b3 = new Ball();
	b4 = new Ball();
	b5 = new Ball();
	
  s = new Shooter();
}

//Creating blank canvas for the game (background)
void draw() {
  background(255);
	
	
	//writing out instructions for the game on top center of the game screen 
  fill(298, 200, 100);
  textSize(28);
  text("Zap the tires to get them back!", 100, 20);

	//Creating score counter and text 
		fill(0);
		text("Score: " + counter, 400, 520);
	
//Setting class of the balls. Includes motion (movement, bounce, draw) 
  b1.moveBall();
  b1.bounceBall();
  b1.drawBall();

  b2.moveBall();
  b2.bounceBall();
  b2.drawBall();
	
  b3.moveBall();
  b3.bounceBall();
  b3.drawBall();
	
	b4.moveBall();
  b4.bounceBall();
  b4.drawBall();
	
	b5.moveBall();
  b5.bounceBall();
  b5.drawBall();
	
	s.drawShooter();

//Once game is over and task is completed. Creating value for counter (highest possible score is 500). The 'task completed'
sentence will appear in the center of the game screen once all the tires (ellipses) have been zapped. 
  if (counter == 500) {
	fill(0);
	textSize(25);
text("Task Completed!", 200, 200);
  }
}

//Controlling the popping of the balls with mousePressed function. When you click the screen using your mouse, the 'laser beam' 
will fire and you can move the rectangle to targer the tires (ellipses) and press on your mouse to shoot. 
void mousePressed() {
  //b1.pop();
  //b2.pop();
	//b3.pop();
	//b4.pop();
	//b5.pop();
  s.shoot();
}


//Function of the 'class' (What the balls will do). After defining these tokens, I can control what my tire's (ellipse) velocity 
(speed), size, radius, color and determine flow of the program with boolean (true or false) 
class Ball {
  float x;
  float y;
  float speed;
  float ballSize;
  float radius;
  int myColor;
  boolean popped;

	//Charactersitics of the tires (speed, color, x and y coordinates of tire, tire sizes, radius and flow- false)
  Ball() {
    x = random(width);
    y = random(30, 200);
    speed = (-5, 5);
    ballSize = 30;
    radius = ballSize/2;
    myColor = 88;
    popped = false;
  }

	//Movement of balls (tires) to the right 
  void moveBall() {  
    x = x + speed; // change x location
  }

	//Repetition. Movement of tires to the left. Tires will be moving at a constant velocity back and forth even after 
	being popped. 
  void bounceBall() {
    if (x > width || x < 0) { 
      speed = speed *-1; //reversing the direction of 'x' 
    }
  }

	//Drawing the ball (tire) 
  void drawBall() {
    noStroke();
    fill(myColor);
    ellipse(x, y, ballSize, ballSize); //draw the ball
  }

	//Score and popping tires 
  void pop() {
    float d = dist(x, y, mouseX, y);
    if (d < radius) {  
      if (popped == false) {
        myColor = 255;
        popped = true;
        counter+=100;			

      }
    }
  }
}

//Thread for shooting 
class Shooter {

  float x;
  float y;

  Shooter() {

    x = width/2;
    y = height-20;
  }

  void drawShooter() {
    rectMode(CENTER);
    stroke(0);
    strokeWeight(3);
    fill(0);
    rect(mouseX, height-20, 30, 15);
    line(mouseX, y, mouseX, height-40);
  }

  void shoot() {
    b1.pop();
    b2.pop();
		b3.pop();
		b4.pop();
		b5.pop();
    strokeWeight(1);
    stroke(177);
    line(mouseX, y, mouseX, 0);	
  }	
}
